
==================== FINAL INTERFACE ====================
2016-02-08 09:21:34.3167506 UTC

interface mmacl_7qCmVzAeZ7l4QbMWDs7fVL:Parser.NewParse 7102
  interface hash: 63c1bf800f30732e40bbe84af1ce3766
  ABI hash: b3b38148bca2e2fa4eb968c0ffd43aac
  export-list hash: 71ae6defe9728ef7e70da6269fd0d5e8
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 48e279ab1fe8ac6bd242ea3630371382
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.NewParse.expr
  Parser.NewParse.parseExpr
  Parser.NewParse.Expr{Parser.NewParse.Add Parser.NewParse.Alter Parser.NewParse.And Parser.NewParse.Apply Parser.NewParse.Apply1 Parser.NewParse.Apply11 Parser.NewParse.Args Parser.NewParse.Blk Parser.NewParse.BlkE Parser.NewParse.BlkSeq Parser.NewParse.BlkSeqE Parser.NewParse.Chr Parser.NewParse.Compound Parser.NewParse.Cond Parser.NewParse.Derivative Parser.NewParse.Dot Parser.NewParse.Equal Parser.NewParse.Fact Parser.NewParse.Fact2 Parser.NewParse.Function Parser.NewParse.Great Parser.NewParse.GreatEq Parser.NewParse.Inverse Parser.NewParse.Less Parser.NewParse.LessEq Parser.NewParse.Lis Parser.NewParse.Map Parser.NewParse.MapAll Parser.NewParse.Mul Parser.NewParse.Negate Parser.NewParse.None Parser.NewParse.Not Parser.NewParse.NullSeq Parser.NewParse.NullSeqE Parser.NewParse.Num Parser.NewParse.Or Parser.NewParse.Out Parser.NewParse.Part Parser.NewParse.PartArgs Parser.NewParse.Pattern Parser.NewParse.PatternTest Parser.NewParse.Pow Parser.NewParse.Replace Parser.NewParse.ReplaceRepeated Parser.NewParse.Rule Parser.NewParse.RuleDelayed Parser.NewParse.Set Parser.NewParse.SetDelayed Parser.NewParse.Slot Parser.NewParse.SlotSeq Parser.NewParse.Str Parser.NewParse.UnEq Parser.NewParse.Unset Parser.NewParse.Var}
  Parser.NewParse.Stage1
module dependencies: Data.Number.Hier Data.Number.Number
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Data.Number.Number 2ac8bfb8a00bd9e3712221b1e929b631
  exports: c2c926f6c2c1eef8393e1f6cda1b117c
  Double b9bbe454e3be1be40c91da2bbfb02ef1
  Integer ff3d0cdf85cbf1ba5bc0ca7ede0fd44b
  Number 053c2dbacc4e48f6b812046fba0663d4
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec c0bc06fb0aaf9f07c9c990b6feda62a0
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Char 3d9f29c30a347a559b2aa8769fe3034a
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Combinator 6470a31e1d343fdf67b776b63364f4eb
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Error 3f9177ed0003ecb8a44066d0c7b115fb
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Expr 5bb40a45827c27e06a75e3f3e78e85a8
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Language 77a12da5e6337b9f083d7bddbbaba842
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Prim 023d59fdb59af33105244545d62b64fd
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.String b954ba4bedb4a8d7e46c6192637cb4b6
import  -/  parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0:Text.Parsec.Token f904f39079c203e8b72b47b78061790c
ef6d7a201a80315a3c2d694182d73d9d
  $fEqExpr :: GHC.Classes.Eq Parser.NewParse.Expr
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.NewParse.Expr
                  Parser.NewParse.$fEqExpr_$c==
                  Parser.NewParse.$fEqExpr_$c/= -}
ef6d7a201a80315a3c2d694182d73d9d
  $fEqExpr_$c/= ::
    Parser.NewParse.Expr -> Parser.NewParse.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a58 :: Parser.NewParse.Expr b :: Parser.NewParse.Expr ->
                 case Parser.NewParse.$fEqExpr_$c== a58 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef6d7a201a80315a3c2d694182d73d9d
  $fEqExpr_$c== ::
    Parser.NewParse.Expr -> Parser.NewParse.Expr -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ef6d7a201a80315a3c2d694182d73d9d
  $fShowExpr :: GHC.Show.Show Parser.NewParse.Expr
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.NewParse.Expr
                  Parser.NewParse.$fShowExpr_$cshowsPrec
                  Parser.NewParse.$fShowExpr_$cshow
                  Parser.NewParse.$fShowExpr_$cshowList -}
ef6d7a201a80315a3c2d694182d73d9d
  $fShowExpr1 :: Parser.NewParse.Expr -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Parser.NewParse.$fShowExpr_$cshowsPrec
                   Parser.NewParse.$fShowExpr2) -}
30a92a0a5fa1b5e102bdec3f1787ac93
  $fShowExpr2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
ef6d7a201a80315a3c2d694182d73d9d
  $fShowExpr_$cshow :: Parser.NewParse.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x2 :: Parser.NewParse.Expr ->
                 Parser.NewParse.$fShowExpr_$cshowsPrec
                   GHC.Show.shows18
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef6d7a201a80315a3c2d694182d73d9d
  $fShowExpr_$cshowList :: [Parser.NewParse.Expr] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Parser.NewParse.Expr
                   Parser.NewParse.$fShowExpr1) -}
ef6d7a201a80315a3c2d694182d73d9d
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Parser.NewParse.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
fe077f4ebbc434bc5d5114fa968514b3
  $wa ::
    [Parser.NewParse.SemiExpr]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Parser.NewParse.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 3,
     Strictness: <L,U><L,U(U,U,U)><C(C(C(S))),1*C1(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ w :: [Parser.NewParse.SemiExpr]
                   @ b
                   w1 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   w2 :: Parser.NewParse.Expr
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b ->
                 w2
                   (let {
                      fail :: GHC.Prim.Void# -> Parser.NewParse.Expr
                        {- Arity: 1, Strictness: <L,A> -}
                      = \ ds :: GHC.Prim.Void#[OneShot] ->
                        case Parser.NewParse.parseExpr_go
                               w
                               (GHC.List.lastError @ Parser.NewParse.SemiExpr) of wild {
                          Parser.NewParse.Semi ds1
                          -> Parser.NewParse.Compound
                               (GHC.Base.++
                                  @ Parser.NewParse.Expr
                                  (GHC.Base.map
                                     @ Parser.NewParse.SemiExpr
                                     @ Parser.NewParse.Expr
                                     Parser.NewParse.fromSemi
                                     w)
                                  Parser.NewParse.parseExpr7)
                          Parser.NewParse.Nosemi ds1
                          -> Parser.NewParse.Compound
                               (GHC.Base.map
                                  @ Parser.NewParse.SemiExpr
                                  @ Parser.NewParse.Expr
                                  Parser.NewParse.fromSemi
                                  w) }
                    } in
                    case w of wild {
                      [] -> fail GHC.Prim.void#
                      : ds ds1
                      -> case ds of wild1 {
                           Parser.NewParse.Semi ipv -> fail GHC.Prim.void#
                           Parser.NewParse.Nosemi e
                           -> case ds1 of wild2 {
                                [] -> e : ipv ipv1 -> fail GHC.Prim.void# } } })
                   w1
                   (case w1 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                    Text.Parsec.Error.ParseError
                      ds4
                      (GHC.Types.[] @ Text.Parsec.Error.Message) })) -}
e2e5c70a4af15662cf7b462638a0b0f0
  $wa1 ::
    Parser.NewParse.Expr
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Parser.NewParse.SemiExpr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Parser.NewParse.SemiExpr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0] -}
ef6d7a201a80315a3c2d694182d73d9d
  data Expr
    = Num Data.Number.Number.Number
    | Lis [Parser.NewParse.Expr]
    | Args [Parser.NewParse.Expr]
    | Var GHC.Base.String
    | Add Parser.NewParse.Expr Parser.NewParse.Expr
    | Mul Parser.NewParse.Expr Parser.NewParse.Expr
    | Pow Parser.NewParse.Expr Parser.NewParse.Expr
    | Inverse Parser.NewParse.Expr
    | And Parser.NewParse.Expr Parser.NewParse.Expr
    | Or Parser.NewParse.Expr Parser.NewParse.Expr
    | Not Parser.NewParse.Expr
    | Equal Parser.NewParse.Expr Parser.NewParse.Expr
    | Less Parser.NewParse.Expr Parser.NewParse.Expr
    | LessEq Parser.NewParse.Expr Parser.NewParse.Expr
    | Great Parser.NewParse.Expr Parser.NewParse.Expr
    | GreatEq Parser.NewParse.Expr Parser.NewParse.Expr
    | UnEq Parser.NewParse.Expr Parser.NewParse.Expr
    | Compound [Parser.NewParse.Expr]
    | Apply Parser.NewParse.Expr Parser.NewParse.Expr
    | Fact Parser.NewParse.Expr
    | Fact2 Parser.NewParse.Expr
    | Negate Parser.NewParse.Expr
    | Part Parser.NewParse.Expr Parser.NewParse.Expr
    | PartArgs [Parser.NewParse.Expr]
    | Map Parser.NewParse.Expr Parser.NewParse.Expr
    | MapAll Parser.NewParse.Expr Parser.NewParse.Expr
    | Apply1 Parser.NewParse.Expr Parser.NewParse.Expr
    | Apply11 Parser.NewParse.Expr Parser.NewParse.Expr
    | Derivative GHC.Types.Int Parser.NewParse.Expr
    | Rule Parser.NewParse.Expr Parser.NewParse.Expr
    | RuleDelayed Parser.NewParse.Expr Parser.NewParse.Expr
    | Replace Parser.NewParse.Expr Parser.NewParse.Expr
    | ReplaceRepeated Parser.NewParse.Expr Parser.NewParse.Expr
    | Set Parser.NewParse.Expr Parser.NewParse.Expr
    | SetDelayed Parser.NewParse.Expr Parser.NewParse.Expr
    | Unset Parser.NewParse.Expr
    | Dot Parser.NewParse.Expr Parser.NewParse.Expr
    | Blk
    | BlkE Parser.NewParse.Expr
    | BlkSeq
    | BlkSeqE Parser.NewParse.Expr
    | NullSeq
    | NullSeqE Parser.NewParse.Expr
    | Pattern Parser.NewParse.Expr Parser.NewParse.Expr
    | PatternTest Parser.NewParse.Expr Parser.NewParse.Expr
    | Function Parser.NewParse.Expr
    | Slot GHC.Types.Int
    | SlotSeq GHC.Types.Int
    | Str GHC.Base.String
    | Chr GHC.Types.Char
    | Out GHC.Types.Int
    | None
    | Cond Parser.NewParse.Expr Parser.NewParse.Expr
    | Alter Parser.NewParse.Expr Parser.NewParse.Expr
9eda40e29a443ca59dd0b18bb8c96d56
  data SemiExpr
    = Semi Parser.NewParse.Expr | Nosemi Parser.NewParse.Expr
5a395c716675c07d3899f0d1781dfb2c
  type Stage1 =
    Data.Either.Either
      Text.Parsec.Error.ParseError Parser.NewParse.Expr
74a0ae66d6425c60c13e382fea67672b
  expr :: Text.Parsec.String.Parser Parser.NewParse.Expr
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.NewParse.expr1
                  `cast`
                (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.NewParse.Expr>_R)) -}
a40a6b2d8f78ec08000356bc1e8992b4
  expr1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Parser.NewParse.Expr
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.NewParse.Expr
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,C(U)> -}
827b4ed72331e4d01c621f14a7753582
  fromSemi :: Parser.NewParse.SemiExpr -> Parser.NewParse.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Parser.NewParse.SemiExpr ->
                 case ds of wild {
                   Parser.NewParse.Semi e -> e Parser.NewParse.Nosemi e -> e }) -}
e370c9290fa7be33da6c03f3db1dac66
  lexer ::
    Text.Parsec.Token.GenTokenParser
      GHC.Base.String u Data.Functor.Identity.Identity
  {- Unfolding: (\ @ u ->
                 Text.Parsec.Token.makeTokenParser
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   (Parser.NewParse.parseExpr10 @ u)) -}
50a80555682726053afb93ec765aa082
  opNames :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.words Parser.NewParse.parseExpr11) -}
92a195d76b49f6714db517d17ca9e0c4
  parseExpr ::
    GHC.Base.String
    -> Data.Either.Either
         Text.Parsec.Error.ParseError Parser.NewParse.Expr
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.NewParse.parseExpr1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.NTCo:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError Parser.NewParse.Expr>_R) -}
f387385443748a3e2b0cd980c4a499e5
  parseExpr1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            Text.Parsec.Error.ParseError Parser.NewParse.Expr)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s1 :: GHC.Base.String ->
                 Text.Parsec.Prim.runPT
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Parser.NewParse.Expr
                   @ GHC.Types.Char
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.NewParse.parseExpr3
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.NewParse.Expr>_R))
                   GHC.Tuple.()
                   Parser.NewParse.parseExpr2
                   s1) -}
11a7ec001cb4bf1a87ae54132e683457
  parseExpr10 ::
    Text.Parsec.Token.GenLanguageDef
      GHC.Base.String u Data.Functor.Identity.Identity
  {- Unfolding: (\ @ u ->
                 Text.Parsec.Token.LanguageDef
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   Parser.NewParse.parseExpr20
                   Parser.NewParse.parseExpr19
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   (Parser.NewParse.parseExpr17 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Parser.NewParse.parseExpr14 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Text.Parsec.Language.emptyDef1 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (Parser.NewParse.parseExpr12 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   (GHC.Types.[] @ GHC.Base.String)
                   Parser.NewParse.opNames
                   GHC.Types.True) -}
d5da85943f5833e8e2dcb2ff54d69dd8
  parseExpr11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "-> :> && || ! + - * / ; == < <= > >= : @ @@ /@ //@ @@@ ' !! != /. //. = := // & ? *) (* !! /; : | ^"#) -}
8c71ce68a8aaaebc2f188b6b4281e685
  parseExpr12 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ u
                   @ b
                   eta2 :: Text.Parsec.Prim.State GHC.Base.String u
                   eta3 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 case eta2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.NewParse.parseExpr13
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   eta3
                   eta6 } }) -}
97d24ac6779f0f6236664255d548ddd9
  parseExpr13 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ c :: GHC.Types.Char ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   c
                   Parser.NewParse.parseExpr_cs) -}
d45249a8cb90f506d8c96554763dcc1c
  parseExpr14 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ u
                   @ b
                   eta2 :: Text.Parsec.Prim.State GHC.Base.String u
                   eta3 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta5 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Parser.NewParse.parseExpr16 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Parser.NewParse.parseExpr15
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
734081888b1567464209f954d99aa5a0
  parseExpr15 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.alphaNum2
                   (GHC.Types.[] @ GHC.Base.String)) -}
ec8170aa0b6e1eea5b872d92bd96c0aa
  parseExpr16 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ u
                   @ b
                   w2 :: Text.Parsec.Prim.State GHC.Base.String u[OneShot]
                   w3 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String u
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w5 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String u
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w6 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isAlphaNum
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
b6643edc64148850e51dc72cb26a8ca4
  parseExpr17 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ u
                   @ b
                   eta2 :: Text.Parsec.Prim.State GHC.Base.String u
                   eta3 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b[OneShot]
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b[OneShot]
                   eta5 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String u
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b[OneShot]
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b[OneShot] ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Parser.NewParse.parseExpr18 @ u)
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <u>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Parser.NewParse.parseExpr_msgs
                   @ b
                   eta2
                   eta3
                   eta4
                   eta5
                   eta6) -}
224cddf65b55c602ec20f0ecfe58ad69
  parseExpr18 ::
    Text.Parsec.Prim.State GHC.Base.String u
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String u
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ u
                   @ b
                   w2 :: Text.Parsec.Prim.State GHC.Base.String u[OneShot]
                   w3 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String u
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w5 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String u
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w6 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ u
                   @ Data.Functor.Identity.Identity
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isAlpha
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
040a6a022c6e54bcf6369b5833bd1ae1
  parseExpr19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "*)"#) -}
7861d13e24c7e6679fe65195ae24064a
  parseExpr2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pass 1"#) -}
c52b4399c4e39ce6bacf42c62a92857c
  parseExpr20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "(*"#) -}
b23c88df78aae00a92e6b3482be38bb2
  parseExpr3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.NewParse.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.NewParse.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   w3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   w4 :: Parser.NewParse.Expr
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w5 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w6 :: Parser.NewParse.Expr
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w7 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ Parser.NewParse.Expr
                   Parser.NewParse.parseExpr5
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <() -> Parser.NewParse.Expr>_R))
                   Parser.NewParse.parseExpr4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   w3
                   w4
                   w5
                   w6
                   w7) -}
2a5340334b8ff0caa8660b100c9c0678
  parseExpr4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Combinator.eof1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Show.$fShowChar) -}
9e259d77953a06dab36e4aa9aac0652c
  parseExpr5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((() -> Parser.NewParse.Expr)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((() -> Parser.NewParse.Expr)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   cok :: (() -> Parser.NewParse.Expr)
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                   cerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eok :: (() -> Parser.NewParse.Expr)
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                   eerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Parser.NewParse.Expr
                   @ Parser.NewParse.Expr
                   Parser.NewParse.parseExpr9
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.NewParse.Expr -> Parser.NewParse.Expr>_R))
                   Parser.NewParse.parseExpr6
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.NewParse.Expr>_R))
                   @ b1
                   s1
                   (\ x2 :: Parser.NewParse.Expr -> cok (\ ds :: () -> x2))
                   cerr
                   (\ x2 :: Parser.NewParse.Expr -> eok (\ ds :: () -> x2))
                   eerr) -}
b945e0903dfc064b6db76fac712e7674
  parseExpr6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.NewParse.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.NewParse.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta3 :: Parser.NewParse.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta5 :: Parser.NewParse.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.many3
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ Parser.NewParse.SemiExpr
                   Parser.NewParse.parseExpr8
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.NewParse.SemiExpr>_R))
                   @ b1
                   eta2
                   (\ x2 :: [Parser.NewParse.SemiExpr]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.NewParse.$wa
                      x2
                      @ b1
                      s2
                      (\ x3 :: Parser.NewParse.Expr[OneShot]
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x3 s3 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x2 :: [Parser.NewParse.SemiExpr]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.NewParse.$wa
                      x2
                      @ b1
                      s2
                      (\ x3 :: Parser.NewParse.Expr[OneShot]
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta5 x3 s3 (Text.Parsec.Error.mergeError err err')))
                   eta6) -}
a7ff2b1618ed82824983e6dd4528d124
  parseExpr7 :: [Parser.NewParse.Expr]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Parser.NewParse.Expr
                   Parser.NewParse.None
                   (GHC.Types.[] @ Parser.NewParse.Expr)) -}
53f7704ee5fe27ee70c46355683d2470
  parseExpr8 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.NewParse.SemiExpr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.NewParse.SemiExpr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta3 :: Parser.NewParse.SemiExpr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta5 :: Parser.NewParse.SemiExpr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Parser.NewParse.expr1
                   @ b1
                   eta2
                   (\ x2 :: Parser.NewParse.Expr
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                      err :: Text.Parsec.Error.ParseError ->
                    Parser.NewParse.$wa1
                      x2
                      @ b1
                      s2
                      eta3
                      eta4
                      (\ x3 :: Parser.NewParse.SemiExpr
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta3 x3 s3 (Text.Parsec.Error.mergeError err err')))
                   eta4
                   (\ x2 :: Parser.NewParse.Expr
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                      err :: Text.Parsec.Error.ParseError ->
                    Parser.NewParse.$wa1
                      x2
                      @ b1
                      s2
                      eta3
                      eta4
                      (\ x3 :: Parser.NewParse.SemiExpr
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta5 x3 s3 (Text.Parsec.Error.mergeError err err')))
                   eta6) -}
cadc06665bf066540ffa29ef4dd32ddd
  parseExpr9 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((Parser.NewParse.Expr -> Parser.NewParse.Expr)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((Parser.NewParse.Expr -> Parser.NewParse.Expr)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   eta2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta3 :: (Parser.NewParse.Expr -> Parser.NewParse.Expr)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta4 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta5 :: (Parser.NewParse.Expr -> Parser.NewParse.Expr)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 case Parser.NewParse.lexer
                        @ () of wild { Text.Parsec.Token.TokenParser ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ->
                 ds16
                   `cast`
                 (Text.Parsec.Prim.NTCo:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <()>_R)
                   @ b1
                   eta2
                   (\ x2 :: () -> eta3 (GHC.Base.id @ Parser.NewParse.Expr))
                   eta4
                   (\ x2 :: () -> eta5 (GHC.Base.id @ Parser.NewParse.Expr))
                   eta6 }) -}
83138364fbb7ec76ede2bd2dcfeff482
  parseExpr_cs :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "@/=.>!;"#) -}
d9cbba061a35691b3760cfc75297eba1
  parseExpr_go ::
    [Parser.NewParse.SemiExpr]
    -> Parser.NewParse.SemiExpr -> Parser.NewParse.SemiExpr
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
1d0062b29a9b35d453b8fc725587b19c
  parseExpr_msgs :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.letter2
                   (GHC.Types.[] @ GHC.Base.String)) -}
instance GHC.Classes.Eq [Parser.NewParse.Expr]
  = Parser.NewParse.$fEqExpr
instance GHC.Show.Show [Parser.NewParse.Expr]
  = Parser.NewParse.$fShowExpr
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

