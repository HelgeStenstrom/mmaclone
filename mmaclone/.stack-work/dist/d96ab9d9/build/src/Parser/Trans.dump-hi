
==================== FINAL INTERFACE ====================
2016-02-08 09:21:45.1671221 UTC

interface mmacl_7qCmVzAeZ7l4QbMWDs7fVL:Parser.Trans 7102
  interface hash: 0bd53aba13606b5c9ed3b0af63eccc70
  ABI hash: a678f3ff95bd10cd8196a45495cd3b9a
  export-list hash: fa284101b548a4712b7d9cecd9b6caa6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a786f34c4327d51b696946d69978cfe8
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.Trans.inverseE
  Parser.Trans.negateE
  Parser.Trans.readExpr
  Parser.Trans.transform
module dependencies: Data.DataType Data.Number.Hier
                     Data.Number.Number Parser.NewParse
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  Data.DataType c371d6fa81ae9f0301da5ca425bb3968
  exports: 085545853aa06ac5ecb7dc9bef058506
  Atom 07ea59aa4e810b3562eaa798e4b5c76b
  Char 84382c40cbc5332600a9f97ea0ae0bd3
  Incomplete 9dafa49e671394b403eea4cd882671e8
  LispVal f70327bb01160acdaa903077fba7f03a
  List 1dd2cf24c8e01106ae239f6b22b15c51
  Number e387ab7157ef16d9857ca76a6e55f510
  Parser ae93122460acdb4b177dea5af2fde778
  String 749b1441ef79d451fbbaa004153c455f
  ThrowsError 1e8f053207d9a08fff23b089436e8acb
  atomNull 64066d9f659e61723715da72bfd080c3
  integer 6626800fee4ca5fd9d3f73f2ed5e8592
  list 45d5ec066180308102cb4681bd29f193
import  -/  Data.Number.Number 2ac8bfb8a00bd9e3712221b1e929b631
  exports: c2c926f6c2c1eef8393e1f6cda1b117c
  negateN 38783887fe7682622ac25469baf024e1
import  -/  Parser.NewParse b3b38148bca2e2fa4eb968c0ffd43aac
  exports: 71ae6defe9728ef7e70da6269fd0d5e8
  Add 8f91e88cb4f8c3d59d906294cd4ba031
  Alter 07777ab52ba32ea84cc8e2012bdd7e42
  And 0d04b8d5d32945a761859fc6bf02cde1
  Apply b316cca14d1fd7f4827992a089d052e9
  Apply1 9ed1d526ac25356f9b38cb66dc23e943
  Apply11 1e6bef2ca0a78ec66eebd2aa71a00170
  Args b4962c89cc4676e9a1c0f9c679cb9d1f
  Blk c22214de35422e9c43ff22e5753f21b6
  BlkE b110c3c0e0433a87dfa494e0f50d4492
  BlkSeq 77217c43e85da43c731801dda4237efb
  BlkSeqE c438ef60b9d36781e1ad2e772e51ade0
  Chr 6ab0e9f6a7fccb8639bd57acec76033a
  Compound ef66ec5d7317bfe6c233dbc965533ee4
  Cond 40a6dd6c316ac172fe04532e787b0949
  Derivative 4dc3b4724b0683daf1de9b9f960d3ded
  Dot 7eaea6bc19046706de393e5d0bf8c6c8
  Equal 8e34311bdbdc7902975bac50c768d00b
  Expr ef6d7a201a80315a3c2d694182d73d9d
  Fact 320e09a36410ed22311388b8eec694ee
  Fact2 3a351ee23547a6fc09c58f4b14d4ff40
  Function b83ad2d4156813888e7f002931400f98
  Great ac11690007afd6c4c07376f6d6ab34d1
  GreatEq 1211acb9bf9fedfbd8438018f5f210bc
  Inverse f174fe0df27b598b206c25e5e4cc6734
  Less 86df1862ca97c9d01ff3edd0a582b937
  LessEq aa52e25f913b77ceeb99b54218b4eb05
  Lis d434e4a37a71befb4fb797fcd645c75d
  Map 89ac81f1220d0a6cf43423c95d18d9c6
  MapAll 98e1fc5d46e430d10445125425f259ed
  Mul e7dace925996bac42884f55bba0835df
  Negate 2d206691a996e9e4183483ce52cf40a4
  None 5595dc9ad23f6536269b32203eb26ef0
  Not ba34f86a093188efda2f44506fb0899b
  NullSeq 1a542d091623f4ab226ea6e55cc66739
  NullSeqE 577d2ee708b90d0fae13fe99589ee62e
  Num d0f08ffc9f300cf9750b64db1c996dad
  Or 065b696302ac260478f5bc7fc27918dc
  Out a5cdabc4b8446f8a0b12d38da4d1973f
  Part 1bf45b80d16564f5c17e850e3e410972
  PartArgs df7bc74a01231a0cef3dbfbb69af4b26
  Pattern ebed3293b89454d72b365592c9b22c28
  PatternTest 4ac1778a774d54eaf8c12a4be2597fa2
  Pow 3dce069c247ccfc18522a5af7fa8c797
  Replace 9b50953560a8fec3fa326f322cea24c2
  ReplaceRepeated d0d8e5f14ad394a222577db5178b692b
  Rule b91335abfe35892f62d2e0b18e509080
  RuleDelayed 9e9cd73cfd6dcc1ed16093565d88daaf
  Set cae15bff759df819c83ff8999edfce9e
  SetDelayed 8a4bab9acf02d1aa946ac91876832978
  Slot 970ca731b81cf1d4cc4fa6ef3fdb0bb7
  SlotSeq 29092738053e961992bf27325aaabff1
  Stage1 5a395c716675c07d3899f0d1781dfb2c
  Str 47b4d6a99efb44478762331a7193549f
  UnEq 51b403920608444b29eb9d1ba4dac4c2
  Unset ef5973371e56d48af6300bf79014ac94
  Var 2572c05b893fee06542c812bbcf4e54c
  parseExpr 92a195d76b49f6714db517d17ca9e0c4
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Error.Class ba990105c31f50ec068e65779adef46a
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Except 794a4a733dd47f7fbb820afcb8ea0779
24109eacb165d4738cfa0bbfde4fe877
  expr2LispVal ::
    Parser.NewParse.Expr
    -> Data.DataType.ThrowsError Data.DataType.LispVal
  {- Arity: 1, Strictness: <S,U> -}
4601bb46521d0c372cfe0219b8045620
  inverseE :: Data.DataType.LispVal -> Data.DataType.LispVal
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ n :: Data.DataType.LispVal ->
                 Data.DataType.List
                   (GHC.Types.:
                      @ Data.DataType.LispVal
                      Parser.Trans.inverseE4
                      (GHC.Types.:
                         @ Data.DataType.LispVal
                         n
                         (GHC.Types.:
                            @ Data.DataType.LispVal
                            Parser.Trans.inverseE1
                            (GHC.Types.[] @ Data.DataType.LispVal))))) -}
25c788e564774667f4432edaac273358
  inverseE1 :: Data.DataType.LispVal
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.DataType.Number Parser.Trans.inverseE2) -}
78abc83cf2f44bcfa62a21121cbaa137
  inverseE2 :: Data.Number.Number.Number
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Data.Number.Number.Integer Parser.Trans.inverseE3) -}
2f6026c85b2b17df5111a13b25af0af1
  inverseE3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer -1) -}
91a2c24ac7e39644aec990c8343425ee
  inverseE4 :: Data.DataType.LispVal
  {- Strictness: m3,
     Unfolding: (Data.DataType.Atom Parser.Trans.inverseE5) -}
32211b9f01647eea7819568cc4062cea
  inverseE5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Power"#) -}
3fb24a3d8197313e9c60d4a55d47b230
  negateE :: Data.DataType.LispVal -> Data.DataType.LispVal
  {- Arity: 1, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ e :: Data.DataType.LispVal ->
                 Data.DataType.List
                   (GHC.Types.:
                      @ Data.DataType.LispVal
                      Parser.Trans.negateE1
                      (GHC.Types.:
                         @ Data.DataType.LispVal
                         Parser.Trans.inverseE1
                         (GHC.Types.:
                            @ Data.DataType.LispVal
                            e
                            (GHC.Types.[] @ Data.DataType.LispVal))))) -}
ac7240fda97862c509f68589ed031597
  negateE1 :: Data.DataType.LispVal
  {- Strictness: m3,
     Unfolding: (Data.DataType.Atom Parser.Trans.negateE2) -}
337e290e111583868811944ea4a2f30b
  negateE2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Times"#) -}
c3be065ce0b516119c2ef74a9fb5f5bb
  readExpr ::
    GHC.Base.String -> Data.DataType.ThrowsError Data.DataType.LispVal
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ x :: GHC.Base.String ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ Parser.NewParse.Expr
                         @ GHC.Types.Char
                         (Text.Parsec.String.$s$fStream[]mtok @ GHC.Types.Char)
                         Parser.NewParse.parseExpr3
                           `cast`
                         (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Parser.NewParse.Expr>_R))
                         GHC.Tuple.()
                         Parser.NewParse.parseExpr2
                         x)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError Parser.NewParse.Expr>_R) of wild {
                   Data.Either.Left err
                   -> Data.Either.Left
                        @ Data.DataType.LispError
                        @ Data.DataType.LispVal
                        (Data.DataType.Parser err)
                   Data.Either.Right expr -> Parser.Trans.expr2LispVal expr }) -}
1a2ce2b6f714d80c7da73d5a6553d71c
  transform ::
    Parser.NewParse.Stage1
    -> Data.DataType.ThrowsError Data.DataType.LispVal
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.Either.Either
                           Text.Parsec.Error.ParseError Parser.NewParse.Expr ->
                 case ds of wild {
                   Data.Either.Left err
                   -> Data.Either.Left
                        @ Data.DataType.LispError
                        @ Data.DataType.LispVal
                        (Data.DataType.Parser err)
                   Data.Either.Right expr -> Parser.Trans.expr2LispVal expr }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

