
==================== FINAL INTERFACE ====================
2016-02-08 09:21:35.680719 UTC

interface mmacl_7qCmVzAeZ7l4QbMWDs7fVL:Eval.Environment 7102
  interface hash: 5b5d1dba23e3e57e871340cbdfc5ef90
  ABI hash: 8c46026201e11c6c422296bbca98fa64
  export-list hash: 9fbd4b4e14195047d3915f7e4c8c414a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c1e9942a00c9ca8dc643a8506e6216aa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Eval.Environment.evalWithEnv
module dependencies: Data.DataType Data.Number.Hier
                     Data.Number.Number Eval.Patt.Pattern
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN*
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base 5c2ff57702bb6d3bb1e1daa9506827de
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Strict da4f8d9da9474d9e5066f35b15fbc85c
import  -/  Data.DataType c371d6fa81ae9f0301da5ca425bb3968
  exports: 085545853aa06ac5ecb7dc9bef058506
  Atom 07ea59aa4e810b3562eaa798e4b5c76b
  Context d71a22e628c445e694dd5121fcdebfdf
  Env fc573da003d7c5bfd7f3e33e987e75bf
  IOThrowsError 19a4e167a2e8ab64f1e20722498116b4
  LispVal f70327bb01160acdaa903077fba7f03a
  List 1dd2cf24c8e01106ae239f6b22b15c51
  PatternRule bee73cd252abd815157f88d18f0f6ea5
  ValueRule 3dc77e0ec2f9d5e4a01072fe9abf40d2
  pattern f5cb16779552ecad86d0d38c4fc6a876
  readRule 3c83c806eb97e37569e0a41386c5cee3
  value fc167161bd7bc613543b445007f2c69a
import  -/  Eval.Patt.Pattern db10baf4603aa2503f1530414f11a8d2
  exports: b1cd7e7d071dde4977806f36ebb5044b
  replace 26abaffa038b89f63055bda1e9aae652
d83fe5d65b62cedd1dfca76e593cfb61
  $slookup1 ::
    Data.DataType.LispVal
    -> Data.Map.Base.Map Data.DataType.LispVal a -> GHC.Base.Maybe a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
ef7e81a5b751f01cfbbcb64df96e5157
  $slookup3 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
8f460b660a6ee1e8da190df4d9cabda6
  $wa ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld Data.DataType.Context
    -> Data.DataType.LispVal
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Data.DataType.LispError Data.DataType.LispVal #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.MutVar#
                           GHC.Prim.RealWorld Data.DataType.Context
                   w :: Data.DataType.LispVal
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Data.DataType.Context
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right
                      @ Data.DataType.LispError
                      @ Data.DataType.LispVal
                      (case Eval.Environment.$slookup1
                              @ Data.DataType.LispVal
                              w
                              (Data.DataType.value ipv1) of wild {
                         GHC.Base.Nothing
                         -> case w of wild1 {
                              DEFAULT -> wild1
                              Data.DataType.List ds
                              -> case ds of wild2 {
                                   [] -> wild1
                                   : ds2 ds3
                                   -> case ds2 of wild3 {
                                        DEFAULT -> wild1
                                        Data.DataType.Atom name
                                        -> case ipv1 of wild4 { Data.DataType.Context ds4 ds5 ->
                                           case Eval.Environment.$slookup3
                                                  @ [Data.DataType.Rule]
                                                  name
                                                  ds5 of wild5 {
                                             GHC.Base.Nothing -> wild1
                                             GHC.Base.Just x
                                             -> letrec {
                                                  go :: [(Data.DataType.Pattern,
                                                          Data.DataType.LispVal)]
                                                        -> GHC.Base.Maybe Data.DataType.LispVal
                                                    {- Arity: 1, Strictness: <S,1*U> -}
                                                  = \ ds6 :: [(Data.DataType.Pattern,
                                                               Data.DataType.LispVal)] ->
                                                    case ds6 of wild6 {
                                                      [] -> GHC.Base.Nothing @ Data.DataType.LispVal
                                                      : y ys
                                                      -> case y of ww1 { (,) ww2 ww3 ->
                                                         case Eval.Patt.Pattern.getMatch
                                                                ww2
                                                                wild1 of wild7 {
                                                           GHC.Base.Nothing -> go ys
                                                           GHC.Base.Just x1
                                                           -> GHC.Base.Just
                                                                @ Data.DataType.LispVal
                                                                (Eval.Patt.Pattern.internalReplace
                                                                   ww3
                                                                   x1) } } }
                                                } in
                                                case go x of wild6 {
                                                  GHC.Base.Nothing -> wild1
                                                  GHC.Base.Just v -> v } } } } } }
                         GHC.Base.Just ipv2 -> ipv2 }) #) }) -}
1f903682ad2ed06cc491adeeaa7d8b5a
  evalWithEnv ::
    Data.DataType.Env
    -> Data.DataType.LispVal
    -> Data.DataType.IOThrowsError Data.DataType.LispVal
  {- Arity: 3, Strictness: <S,1*U(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Eval.Environment.evalWithEnv1
                  `cast`
                (<Data.DataType.Env>_R
                 ->_R <Data.DataType.LispVal>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0]
                                    <Data.Either.Either
                                       Data.DataType.LispError Data.DataType.LispVal>_R))
                          (Sym (Control.Monad.Trans.Except.NTCo:ExceptT[0]
                                    <Data.DataType.LispError>_N
                                    <GHC.Types.IO>_R
                                    <Data.DataType.LispVal>_N))) -}
8e23df9fe5e85d744d191cf88f90c057
  evalWithEnv1 ::
    Data.DataType.Env
    -> Data.DataType.LispVal
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Data.DataType.LispError Data.DataType.LispVal #)
  {- Arity: 3, Strictness: <S,1*U(U)><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Data.DataType.Env
                   w1 :: Data.DataType.LispVal
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w `cast`
                      (GHC.IORef.NTCo:IORef[0] <Data.DataType.Context>_N) of ww { GHC.STRef.STRef ww1 ->
                 Eval.Environment.$wa ww1 w1 w2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

