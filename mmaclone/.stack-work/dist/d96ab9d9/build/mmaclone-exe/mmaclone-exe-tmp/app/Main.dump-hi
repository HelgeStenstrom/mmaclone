
==================== FINAL INTERFACE ====================
2016-02-08 09:21:45.8095737 UTC

interface main@main:Main 7102
  interface hash: 1ce695b5add6359ec7eadc00053cb40d
  ABI hash: 478e0e241f4281759e7408419b10458c
  export-list hash: 20f2cf0958a3265d6a6c9e3f1ea32bce
  orphan hash: 4ebae0266a3bea802c89ea3fc5ea7f98
  flag hash: 5587b07b5a14c467ec019a0286ed8966
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.loop
  Main.main
  Main.repl
  Main.report
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mmaclone-0.1.0.0@mmacl_7qCmVzAeZ7l4QbMWDs7fVL
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      parsec-3.1.9@parse_8fSmqig53hOL2SEu1k9Tv0
                      text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text
                         text-1.2.1.3@text_1l1AN4I48k37RaQ6fm6CEh:Data.Text.Lazy
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 5482930cc48b7457dc7c518d05c22912
import  -/  base-4.8.1.0:Text.Printf ad7802849661c053618cc511ab4272b4
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  mmaclone-0.1.0.0@mmacl_7qCmVzAeZ7l4QbMWDs7fVL:Data.DataType c371d6fa81ae9f0301da5ca425bb3968
import  -/  mmaclone-0.1.0.0@mmacl_7qCmVzAeZ7l4QbMWDs7fVL:Eval.Eval 360eaf3e30e382aa6bc67b362ebc71ce
import  -/  mmaclone-0.1.0.0@mmacl_7qCmVzAeZ7l4QbMWDs7fVL:Parser.Trans a678f3ff95bd10cd8196a45495cd3b9a
import  -/  mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU:Control.Monad.Except 794a4a733dd47f7fbb820afcb8ea0779
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Class ced5621141aaa24ab095912d5a649dcc
import  -/  transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Except 6f1b34d26da1a1af7fa950333c6031b3
69cded3e6aa60e1f634bb5a43cf74bb3
  $sprintf3 :: () ~ ()
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq# @ * @ () @ () @~ <()>_N) -}
c2850ca13565a342331e4219d9623a4d
  loop :: Data.DataType.Env -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.loop1
                  `cast`
                (<Data.DataType.Env>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
a7f321a37ff02b69a4994cb64728fec8
  loop1 ::
    Data.DataType.Env
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U> -}
366c19bdb47ddc5364630d84e67a4128
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
1205ebccfb0fa11741c20f2d9eabfedd
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ Data.DataType.Context
                        @ GHC.Prim.RealWorld
                        (Data.DataType.Context
                           (Data.Map.Base.Tip @ Data.DataType.LispVal @ Data.DataType.LispVal)
                           (Data.Map.Base.Tip @ GHC.Base.String @ [Data.DataType.Rule]))
                        s of ds { (#,#) ipv ipv1 ->
                 Main.loop1
                   (GHC.STRef.STRef @ GHC.Prim.RealWorld @ Data.DataType.Context ipv1)
                     `cast`
                   (Sym (GHC.IORef.NTCo:IORef[0]) <Data.DataType.Context>_N)
                   (GHC.Types.I# 1)
                   ipv }) -}
7b6054d3d06208fe6c6f276ab75e85ab
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
ae0db1f551a5a1dd884843c80cc0830d
  repl ::
    Data.DataType.Env
    -> GHC.Types.Int
    -> Data.DataType.IOThrowsError Data.DataType.LispVal
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.repl1
                  `cast`
                (<Data.DataType.Env>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (Sym (GHC.Types.NTCo:IO[0]
                                    <Data.Either.Either
                                       Data.DataType.LispError Data.DataType.LispVal>_R))
                          (Sym (Control.Monad.Trans.Except.NTCo:ExceptT[0]
                                    <Data.DataType.LispError>_N
                                    <GHC.Types.IO>_R
                                    <Data.DataType.LispVal>_N))) -}
e70c6519f9aa64d8cca7eee01176cfc5
  repl1 ::
    Data.DataType.Env
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Data.DataType.LispError Data.DataType.LispVal #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><L,U>,
     Unfolding: (\ env :: Data.DataType.Env
                   n :: GHC.Types.Int
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Text.Printf.$wa
                        @ ()
                        Main.$sprintf3
                        Main.repl2
                        (GHC.Types.:
                           @ Text.Printf.UPrintf
                           (Text.Printf.$w$sparseIntFormat,
                            Text.Printf.$fPrintfArgInt_$sformatInt n)
                           (GHC.Types.[] @ Text.Printf.UPrintf))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case Parser.Trans.readExpr ipv3 of wild {
                   Data.Either.Left e1 -> (# ipv2, wild #)
                   Data.Either.Right x
                   -> Eval.Eval.evalWithRecord1 env n x ipv2 } } }) -}
b0622bdaa54581c1cef08c336f3c04fa
  repl2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "In[%d]:="#) -}
c4e480379fa0c8898e3dfba818c7fe1f
  report ::
    GHC.Types.Int
    -> Data.DataType.ThrowsError Data.DataType.LispVal
    -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.report1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Data.Either.Either
                         Data.DataType.LispError Data.DataType.LispVal>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
50adad4552d4a52e629074148d327c34
  report1 ::
    GHC.Types.Int
    -> Data.Either.Either Data.DataType.LispError Data.DataType.LispVal
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U)><S,1*U><L,U>,
     Unfolding: (\ ds :: GHC.Types.Int
                   ds1 :: Data.Either.Either
                            Data.DataType.LispError Data.DataType.LispVal
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds1 of wild {
                   Data.Either.Left err
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (Data.DataType.$fShowLispError_$cshow err)
                        GHC.Types.True
                        eta
                   Data.Either.Right ds2
                   -> let {
                        $wa :: GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          case Text.Printf.$wa
                                 @ ()
                                 Main.$sprintf3
                                 Main.report3
                                 (GHC.Types.:
                                    @ Text.Printf.UPrintf
                                    (Text.Printf.$w$sparseIntFormat,
                                     Text.Printf.$fPrintfArgInt_$sformatInt ds)
                                    (GHC.Types.[] @ Text.Printf.UPrintf))
                                 w of ds3 { (#,#) ipv ipv1 ->
                          GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (Data.DataType.fullForm ds2)
                            GHC.Types.True
                            ipv }
                      } in
                      case ds2 of wild1 {
                        DEFAULT -> $wa eta
                        Data.DataType.Atom ds3
                        -> case GHC.Base.eqString ds3 Main.report2 of wild2 {
                             GHC.Types.False -> $wa eta
                             GHC.Types.True -> (# eta, GHC.Tuple.() #) } } }) -}
fdedb57713430c55e767f22ac28d3238
  report2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Null"#) -}
c65f0f844cfae7dbc0efc3356d28c1d8
  report3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Out[%d]="#) -}
"SPEC/Main lift @ (ExceptT LispError)" [ALWAYS] forall tpl :: Control.Monad.Trans.Class.MonadTrans
                                                                (Control.Monad.Trans.Except.ExceptT
                                                                   Data.DataType.LispError)
  Control.Monad.Trans.Class.lift @ (Control.Monad.Trans.Except.ExceptT
                                      Data.DataType.LispError)
                                 tpl
  = Control.Monad.Trans.Except.$fMonadTransExceptT_$clift
      @ Data.DataType.LispError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

